name: Promote PDF to GCS

on:
  workflow_dispatch:
    inputs:
      pdf_filename:
        description: 'Optional: PDF filename to promote (leave blank to auto-select newest *.pdf)'
        required: false
        default: ''

env:
  GCS_BUCKET: whitepaper-pdfs-91fa25b2
  DEFAULT_PDF: Circles_Whitepaper_v221.pdf

jobs:
  promote-pdf:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        workload_identity_provider: 'projects/347244006958/locations/global/workloadIdentityPools/github-pool/providers/github-actions-provider'
        service_account: 'whitepaper-github-actions@circles-production-1.iam.gserviceaccount.com'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Check GCS Bucket Access
      run: |
        gsutil ls gs://$GCS_BUCKET || {
          echo "❌ Bucket not accessible!" && exit 1
        }

    - name: Select PDF to Promote
      id: select
      env:
        DEFAULT_PDF: ${{ env.DEFAULT_PDF }}
      run: |
        echo "📥 Selecting PDF to promote..."

        INPUT_FILE="${{ github.event.inputs.pdf_filename }}"

        if [ -n "$INPUT_FILE" ]; then
          SELECTED="$INPUT_FILE"
          echo "📄 Using manually provided input: $SELECTED"
        else
          echo "📦 No input provided. Trying to find newest *.pdf in repo..."
          SELECTED=$(ls -t *.pdf 2>/dev/null | head -n1 || echo "")
          if [ -z "$SELECTED" ]; then
            echo "⚠️ No PDF found in repo. Falling back to default: $DEFAULT_PDF"
            SELECTED="$DEFAULT_PDF"
          fi
        fi

        if [ ! -f "$SELECTED" ]; then
          echo "❌ File '$SELECTED' not found!"
          exit 1
        fi

        echo "✅ PDF selected: $SELECTED"
        echo "pdf=$SELECTED" >> $GITHUB_OUTPUT

    - name: Upload selected PDF as latest.pdf
      run: |
        FILE="${{ steps.select.outputs.pdf }}"
        echo "🚀 Uploading '$FILE' to GCS as 'latest.pdf'..."

        gsutil cp "$FILE" gs://$GCS_BUCKET/latest.pdf

        echo "📦 Setting metadata headers..."
        gsutil setmeta -h "Content-Type:application/pdf" gs://$GCS_BUCKET/latest.pdf
        gsutil setmeta -h "Cache-Control:public, max-age=3600" gs://$GCS_BUCKET/latest.pdf

        echo "✅ Promotion complete. '$FILE' is now live at:"
        echo "   👉 https://whitepaper.aboutcircles.com"

    - name: Verify GCS sync
      run: |
        echo "📂 Current files in bucket:"
        gsutil ls -l gs://$GCS_BUCKET/

